// <auto-generated />
using System;
using DiplomskiPokusaj1.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiplomskiPokusaj1.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20211130213755_migration12345")]
    partial class migration12345
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("AuthorMaterial", b =>
                {
                    b.Property<string>("AuthorsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaterialsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("AuthorsId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("AuthorMaterial");
                });

            modelBuilder.Entity("CategoryMaterial", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaterialsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoriesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("CategoryMaterial");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Line2")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Addreses");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AuhtorId")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("LibraryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaterialId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PublisherId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Library", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Isbn")
                        .HasColumnType("longtext");

                    b.Property<string>("LibraryId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.MaterialCopy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaterialId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialCopies");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Publisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Rent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReservationId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateToReturn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("LibraryId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GenreMaterial", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaterialsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("GenresId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("GenreMaterial");
                });

            modelBuilder.Entity("MaterialCopyRent", b =>
                {
                    b.Property<string>("MaterialCopiesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RentsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MaterialCopiesId", "RentsId");

                    b.HasIndex("RentsId");

                    b.ToTable("MaterialCopyRent");
                });

            modelBuilder.Entity("MaterialCopyReservation", b =>
                {
                    b.Property<string>("MaterialCopiesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReservationsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MaterialCopiesId", "ReservationsId");

                    b.HasIndex("ReservationsId");

                    b.ToTable("MaterialCopyReservation");
                });

            modelBuilder.Entity("MaterialPublisher", b =>
                {
                    b.Property<string>("MaterialsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PublishersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MaterialsId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("MaterialPublisher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AuthorMaterial", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryMaterial", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Image", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Author", "Author")
                        .WithMany("Images")
                        .HasForeignKey("AuthorId");

                    b.HasOne("DiplomskiPokusaj1.Model.Library", "Library")
                        .WithMany("Images")
                        .HasForeignKey("LibraryId");

                    b.HasOne("DiplomskiPokusaj1.Model.Material", "Material")
                        .WithMany("Images")
                        .HasForeignKey("MaterialId");

                    b.HasOne("DiplomskiPokusaj1.Model.Publisher", "Publisher")
                        .WithMany("Images")
                        .HasForeignKey("PublisherId");

                    b.Navigation("Author");

                    b.Navigation("Library");

                    b.Navigation("Material");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Library", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Address", "Address")
                        .WithMany("Libraris")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Material", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Library", null)
                        .WithMany("Materials")
                        .HasForeignKey("LibraryId");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.MaterialCopy", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.HasOne("DiplomskiPokusaj1.Model.Material", "Material")
                        .WithMany("MaterialCopies")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Library");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Publisher", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Address", "Address")
                        .WithMany("Publishers")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Rent", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.HasOne("DiplomskiPokusaj1.Model.Reservation", "Reservation")
                        .WithOne("Rent")
                        .HasForeignKey("DiplomskiPokusaj1.Model.Rent", "ReservationId");

                    b.HasOne("DiplomskiPokusaj1.Model.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId");

                    b.Navigation("Library");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Reservation", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.HasOne("DiplomskiPokusaj1.Model.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");

                    b.Navigation("Library");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.User", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.HasOne("DiplomskiPokusaj1.Model.Library", "Library")
                        .WithMany("Employees")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Address");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("GenreMaterial", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialCopyRent", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.MaterialCopy", null)
                        .WithMany()
                        .HasForeignKey("MaterialCopiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.Rent", null)
                        .WithMany()
                        .HasForeignKey("RentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialCopyReservation", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.MaterialCopy", null)
                        .WithMany()
                        .HasForeignKey("MaterialCopiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialPublisher", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomskiPokusaj1.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiplomskiPokusaj1.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Address", b =>
                {
                    b.Navigation("Libraris");

                    b.Navigation("Publishers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Author", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Library", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Images");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Material", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("MaterialCopies");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Publisher", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.Reservation", b =>
                {
                    b.Navigation("Rent");
                });

            modelBuilder.Entity("DiplomskiPokusaj1.Model.User", b =>
                {
                    b.Navigation("Rents");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
